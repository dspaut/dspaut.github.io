{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Deepsound Deepsound is the brand of NDT product of DSPAUT DSK Install Tutorial API","title":"Welcome to Deepsound"},{"location":"#welcome-to-deepsound","text":"Deepsound is the brand of NDT product of DSPAUT","title":"Welcome to Deepsound"},{"location":"#dsk","text":"Install Tutorial API","title":"DSK"},{"location":"dsk/","text":"DSK Index","title":"Index"},{"location":"dsk/dsk_install/","text":"Download the latest installation file from github. dskinstaller Run the downloaded DSK_Setup_xxx.exe from Github's installer directory. Set the desired directory and press install button. At the end of the installation, a directory is created in that location as follows. To perform the tutorial sample, download the tutorial installation file(dsk_tutorial_paut_datexxx.exe) from the tutorial directory of github and install it in the same way as the dsk installer. When tutorial is installed, the dictionary configuration is as follows. Directory structure There are Release and RES directory under Bin directory, all executable files must be located in the Release directory, ror reference, the Release directory may be renamed. But RES directory where the resource files are located must not be renamed. This is because the release files references the resourece files with the relative directory like as ../RES. Release, RES directories are located in the Bin directory. RES directory must not be renamed. Build with visual studio Open the tutorial solution file (TutorialPAUT.sln) using the visual studio. Looking at the properties of the project, it is confirmed that build output is Bin/Release. Solution build(Build->Build Solution) creates executable files under Bin/Release. If the files are created as above, the installation is done well.","title":"Install"},{"location":"dsk/dsk_install/#directory-structure","text":"There are Release and RES directory under Bin directory, all executable files must be located in the Release directory, ror reference, the Release directory may be renamed. But RES directory where the resource files are located must not be renamed. This is because the release files references the resourece files with the relative directory like as ../RES. Release, RES directories are located in the Bin directory. RES directory must not be renamed.","title":"Directory structure"},{"location":"dsk/dsk_install/#build-with-visual-studio","text":"Open the tutorial solution file (TutorialPAUT.sln) using the visual studio. Looking at the properties of the project, it is confirmed that build output is Bin/Release. Solution build(Build->Build Solution) creates executable files under Bin/Release. If the files are created as above, the installation is done well.","title":"Build with visual studio"},{"location":"dsk/api/","text":"Introduction This document describes the Application Programming Interface (API) of DSK. All DSK's APIs are all executed like DSK.XXX. XXX represents the name of the function and is largely classified into types such as Init, Get, Set, and Upload. Get the parameter of DSK with Get function, and set the parameter of DSK with Set function. If the parameter of DSK is set using the Set function, UploadAllParameters function must be called to be actually applied. Calling the Upload All Parameters function takes some time to set up the DSK using all parameters. To solve this problem, the UploadXXX function is used to set the parameter individually. Upload is same to Set and UploadAllParameters. For example, to set gain, you can set it in two ways as follows. If only gain was changed, both methods had the same effect, and the second method performed quickly 1. First method SetGain(value) UploadAllParameters() 2. Second method UploadGain(value) Not all parameters have an upload function, but an upload function is implemented mainly on frequently used parameters. If you use set or upload functions, then you DSK, unless specifically mentioned, uses mm in length, degree in angle, Hz in frequency, and sec in time. If you use the set, upload function, you must get all the values that may be changed and update them on the your program. This is because if the variables to be set exceed limit, they are allocated as new values in dsk automatically. For example, changing depth changes the number of pixels in the ascan, image width and height in the sscan image. This is an important part that must be observed, and refer to the tutorial examples. Init functions Get functions Set functions Upload functions Miscellany functions","title":"API"},{"location":"dsk/api/#introduction","text":"This document describes the Application Programming Interface (API) of DSK. All DSK's APIs are all executed like DSK.XXX. XXX represents the name of the function and is largely classified into types such as Init, Get, Set, and Upload. Get the parameter of DSK with Get function, and set the parameter of DSK with Set function. If the parameter of DSK is set using the Set function, UploadAllParameters function must be called to be actually applied. Calling the Upload All Parameters function takes some time to set up the DSK using all parameters. To solve this problem, the UploadXXX function is used to set the parameter individually. Upload is same to Set and UploadAllParameters. For example, to set gain, you can set it in two ways as follows. If only gain was changed, both methods had the same effect, and the second method performed quickly 1. First method SetGain(value) UploadAllParameters() 2. Second method UploadGain(value) Not all parameters have an upload function, but an upload function is implemented mainly on frequently used parameters. If you use set or upload functions, then you DSK, unless specifically mentioned, uses mm in length, degree in angle, Hz in frequency, and sec in time. If you use the set, upload function, you must get all the values that may be changed and update them on the your program. This is because if the variables to be set exceed limit, they are allocated as new values in dsk automatically. For example, changing depth changes the number of pixels in the ascan, image width and height in the sscan image. This is an important part that must be observed, and refer to the tutorial examples.","title":"Introduction"},{"location":"dsk/api/#init-functions","text":"","title":"Init functions"},{"location":"dsk/api/#get-functions","text":"","title":"Get functions"},{"location":"dsk/api/#set-functions","text":"","title":"Set functions"},{"location":"dsk/api/#upload-functions","text":"","title":"Upload functions"},{"location":"dsk/api/#miscellany-functions","text":"","title":"Miscellany functions"},{"location":"dsk/api/get_functions/","text":"There is only one value to be returned, most of which are integers or double numbers. The input parameter of all functions is none. GetApertureSize Return aperture size in linary Array mode. In sectorial mode (or azimuthal mode), it value is meaningless. Output parameter int apertureSize GetApertureStep Return aperture step in linary Array mode. In sectorial mode (or azimuthal mode), it value is meaningless. Output parameter int apertureStep GetAcquisitionRate The frame rate calculated according to the image setting, that is, the acquisition rate obtained per second, is returned. Output parameter double framerate GetDepthStart It returns the depth start(mm). Output parameter double depthStart GetDepthRange It returns the depth range(mm). Output parameter double depthRange GetFilterStartFreq It returns start frequency(uint : Hz) of filter which exists after beamforming. Output parameter double filterStart GetFilterStopFreq It returns stop frequency(uint : Hz) of filter which exists after beamforming. Output parameter double filterStop GetFirstElementHeight Returns the height of the first element of the probe mounted on the wedge. Output parameter double firstElementHeight GetFocusLocation Returns the depth position to be focused at the time of transmission. Output parameter double filterLocation GetGain Returns the system gain(unit is dB). Output parameter double gain GetIsWedgeEnable Returns whether the wedge is used. Output parameter bool wedgeEnabled (true/false) GetPrf Returns PRF (Pulse Repetition Frequency, unit is Hz). Output parameter int prf GetProbeElementCount Returns total probe elements count of probe. Output parameter int elementCount GetProbeFirstElement If multiple probes are used and divided into multiple channel groups, the probe element start of the corresponding channel is returned. Output parameter int firstElement GetProbeFrequency Returns probe frequency. (unit is Hz) Output parameter double probeFreq GetProbePitch It returns probe pitch, which is the distance between probe elements. The unit is mm Output parameter double probePitch GetPulseBurstCount Returns the number of ultrasonic pulses transmitted. The pulse of all deepsound products is the bipolar type. Output parameter int burstCount GetPulseVoltage Returns the voltage of the ultrasonic pulse transmitted. Output parameter int pulseVoltage GetPulseWidth Returns the width of the ultrasonic pulse transmitted. In general, probe width becomes the reciprocal of probe frequency. For example, 5 MHz probe has a value of 200 nsec. (Unit is second) Note that changing the probe frequency does not change the pulse width. The pulse width must be changed directly. The probe frequency is only for reference Output parameter double pulseWidth GetRefractedAngleResolution In the sectorial mode, the resolution of the view angle is returned. In normal cases, use 1 degree. Output parameter double angleResolution. GetRefractedAngleStart In the sectorial mode, the start of the view angle is returned. Output parameter double angleStart. GetRefractedAngleStop In the sectorial mode, the stop of the view angle is returned. Output parameter double angleStart. GetRxElementStart Returns the start of the receive element of the probe Output parameter int rxStart. GetRxElementStop Returns the stop of the receive element of the probe Output parameter int rxStop. GetSampleCountPerVector One vector consists of several samples, returns the number of that samples. Output parameter int sampleCountPerVector. GetSScanHeight If the user does not perform the scan conversion directly and uses the scan conversion of DSK, the image width and height of the scan result should be known. This function returns the height of the scan image in this case. Output parameter int sscanHeight. GetSScanWidth If the user does not perform the scan conversion directly and uses the scan conversion of DSK, the image width and height of the scan result should be known. This function returns the width of the scan image in this case. Output parameter int sscanWidth GetTxElementStart Returns the start of the transmit element of the probe Output parameter int txStart. GetTxElementStop Returns the stop of the transmit element of the probe Output parameter int txStop. GetVectorCount One frame consists of several vectors, returns the number of that vectors per frame. Output parameter int vectorCount. GetVelocityInSpecimen Return the ultrasound velocity in a specimen Output parameter int velocity GetVersion Returns the version of DSK. Output parameter string version GetWedgeAngle Returns the angle of wedge. Output parameter double wedgeAngle. GetWedgeDelay Return the set wedge delay. Output parameter double wedgeDelay. GetWedgeVelocity Returns the ultrasonic longitudinal wave velocity at the Wedge. Output parameter double wedgeVelocity.","title":"API get functions"},{"location":"dsk/api/get_functions/#getaperturesize","text":"Return aperture size in linary Array mode. In sectorial mode (or azimuthal mode), it value is meaningless. Output parameter int apertureSize","title":"GetApertureSize"},{"location":"dsk/api/get_functions/#getaperturestep","text":"Return aperture step in linary Array mode. In sectorial mode (or azimuthal mode), it value is meaningless. Output parameter int apertureStep","title":"GetApertureStep"},{"location":"dsk/api/get_functions/#getacquisitionrate","text":"The frame rate calculated according to the image setting, that is, the acquisition rate obtained per second, is returned. Output parameter double framerate","title":"GetAcquisitionRate"},{"location":"dsk/api/get_functions/#getdepthstart","text":"It returns the depth start(mm). Output parameter double depthStart","title":"GetDepthStart"},{"location":"dsk/api/get_functions/#getdepthrange","text":"It returns the depth range(mm). Output parameter double depthRange","title":"GetDepthRange"},{"location":"dsk/api/get_functions/#getfilterstartfreq","text":"It returns start frequency(uint : Hz) of filter which exists after beamforming. Output parameter double filterStart","title":"GetFilterStartFreq"},{"location":"dsk/api/get_functions/#getfilterstopfreq","text":"It returns stop frequency(uint : Hz) of filter which exists after beamforming. Output parameter double filterStop","title":"GetFilterStopFreq"},{"location":"dsk/api/get_functions/#getfirstelementheight","text":"Returns the height of the first element of the probe mounted on the wedge. Output parameter double firstElementHeight","title":"GetFirstElementHeight"},{"location":"dsk/api/get_functions/#getfocuslocation","text":"Returns the depth position to be focused at the time of transmission. Output parameter double filterLocation","title":"GetFocusLocation"},{"location":"dsk/api/get_functions/#getgain","text":"Returns the system gain(unit is dB). Output parameter double gain","title":"GetGain"},{"location":"dsk/api/get_functions/#getiswedgeenable","text":"Returns whether the wedge is used. Output parameter bool wedgeEnabled (true/false)","title":"GetIsWedgeEnable"},{"location":"dsk/api/get_functions/#getprf","text":"Returns PRF (Pulse Repetition Frequency, unit is Hz). Output parameter int prf","title":"GetPrf"},{"location":"dsk/api/get_functions/#getprobeelementcount","text":"Returns total probe elements count of probe. Output parameter int elementCount","title":"GetProbeElementCount"},{"location":"dsk/api/get_functions/#getprobefirstelement","text":"If multiple probes are used and divided into multiple channel groups, the probe element start of the corresponding channel is returned. Output parameter int firstElement","title":"GetProbeFirstElement"},{"location":"dsk/api/get_functions/#getprobefrequency","text":"Returns probe frequency. (unit is Hz) Output parameter double probeFreq","title":"GetProbeFrequency"},{"location":"dsk/api/get_functions/#getprobepitch","text":"It returns probe pitch, which is the distance between probe elements. The unit is mm Output parameter double probePitch","title":"GetProbePitch"},{"location":"dsk/api/get_functions/#getpulseburstcount","text":"Returns the number of ultrasonic pulses transmitted. The pulse of all deepsound products is the bipolar type. Output parameter int burstCount","title":"GetPulseBurstCount"},{"location":"dsk/api/get_functions/#getpulsevoltage","text":"Returns the voltage of the ultrasonic pulse transmitted. Output parameter int pulseVoltage","title":"GetPulseVoltage"},{"location":"dsk/api/get_functions/#getpulsewidth","text":"Returns the width of the ultrasonic pulse transmitted. In general, probe width becomes the reciprocal of probe frequency. For example, 5 MHz probe has a value of 200 nsec. (Unit is second) Note that changing the probe frequency does not change the pulse width. The pulse width must be changed directly. The probe frequency is only for reference Output parameter double pulseWidth","title":"GetPulseWidth"},{"location":"dsk/api/get_functions/#getrefractedangleresolution","text":"In the sectorial mode, the resolution of the view angle is returned. In normal cases, use 1 degree. Output parameter double angleResolution.","title":"GetRefractedAngleResolution"},{"location":"dsk/api/get_functions/#getrefractedanglestart","text":"In the sectorial mode, the start of the view angle is returned. Output parameter double angleStart.","title":"GetRefractedAngleStart"},{"location":"dsk/api/get_functions/#getrefractedanglestop","text":"In the sectorial mode, the stop of the view angle is returned. Output parameter double angleStart.","title":"GetRefractedAngleStop"},{"location":"dsk/api/get_functions/#getrxelementstart","text":"Returns the start of the receive element of the probe Output parameter int rxStart.","title":"GetRxElementStart"},{"location":"dsk/api/get_functions/#getrxelementstop","text":"Returns the stop of the receive element of the probe Output parameter int rxStop.","title":"GetRxElementStop"},{"location":"dsk/api/get_functions/#getsamplecountpervector","text":"One vector consists of several samples, returns the number of that samples. Output parameter int sampleCountPerVector.","title":"GetSampleCountPerVector"},{"location":"dsk/api/get_functions/#getsscanheight","text":"If the user does not perform the scan conversion directly and uses the scan conversion of DSK, the image width and height of the scan result should be known. This function returns the height of the scan image in this case. Output parameter int sscanHeight.","title":"GetSScanHeight"},{"location":"dsk/api/get_functions/#getsscanwidth","text":"If the user does not perform the scan conversion directly and uses the scan conversion of DSK, the image width and height of the scan result should be known. This function returns the width of the scan image in this case. Output parameter int sscanWidth","title":"GetSScanWidth"},{"location":"dsk/api/get_functions/#gettxelementstart","text":"Returns the start of the transmit element of the probe Output parameter int txStart.","title":"GetTxElementStart"},{"location":"dsk/api/get_functions/#gettxelementstop","text":"Returns the stop of the transmit element of the probe Output parameter int txStop.","title":"GetTxElementStop"},{"location":"dsk/api/get_functions/#getvectorcount","text":"One frame consists of several vectors, returns the number of that vectors per frame. Output parameter int vectorCount.","title":"GetVectorCount"},{"location":"dsk/api/get_functions/#getvelocityinspecimen","text":"Return the ultrasound velocity in a specimen Output parameter int velocity","title":"GetVelocityInSpecimen"},{"location":"dsk/api/get_functions/#getversion","text":"Returns the version of DSK. Output parameter string version","title":"GetVersion"},{"location":"dsk/api/get_functions/#getwedgeangle","text":"Returns the angle of wedge. Output parameter double wedgeAngle.","title":"GetWedgeAngle"},{"location":"dsk/api/get_functions/#getwedgedelay","text":"Return the set wedge delay. Output parameter double wedgeDelay.","title":"GetWedgeDelay"},{"location":"dsk/api/get_functions/#getwedgevelocity","text":"Returns the ultrasonic longitudinal wave velocity at the Wedge. Output parameter double wedgeVelocity.","title":"GetWedgeVelocity"},{"location":"dsk/api/init_functions/","text":"InitDsk It is a function that must be called first to use DSK. Input parameter : None Output parameter : None InitDevice It initilizes the ultrasound device. Input parameter : None Output parameter : None CloseDevice You should call the CloseDevice function at the end of the program. It turn off the power to the device. Input parameter : None Output parameter : None","title":"API init functions"},{"location":"dsk/api/init_functions/#initdsk","text":"It is a function that must be called first to use DSK. Input parameter : None Output parameter : None","title":"InitDsk"},{"location":"dsk/api/init_functions/#initdevice","text":"It initilizes the ultrasound device. Input parameter : None Output parameter : None","title":"InitDevice"},{"location":"dsk/api/init_functions/#closedevice","text":"You should call the CloseDevice function at the end of the program. It turn off the power to the device. Input parameter : None Output parameter : None","title":"CloseDevice"},{"location":"dsk/api/misc_functions/","text":"Freeze Freeze the image acquisition. input parameter : None output parameter : None Unfreeze Unfreeze the image acquisition. input parameter : None output parameter : None CalcSScanImage In order to display the scan image, a scan conversion must be performed. Calling this function using frame data received from the callback function obtains scan converted data. The short array received from the callback function is transferred as input and the scan converted byte array is received. Since the returned value is a byte value, color mapping should be performed to change it to color image when displayed on the screen input parameter : short[] output parameter : byte[]","title":"API miscellany functions"},{"location":"dsk/api/misc_functions/#freeze","text":"Freeze the image acquisition. input parameter : None output parameter : None","title":"Freeze"},{"location":"dsk/api/misc_functions/#unfreeze","text":"Unfreeze the image acquisition. input parameter : None output parameter : None","title":"Unfreeze"},{"location":"dsk/api/misc_functions/#calcsscanimage","text":"In order to display the scan image, a scan conversion must be performed. Calling this function using frame data received from the callback function obtains scan converted data. The short array received from the callback function is transferred as input and the scan converted byte array is received. Since the returned value is a byte value, color mapping should be performed to change it to color image when displayed on the screen input parameter : short[] output parameter : byte[]","title":"CalcSScanImage"},{"location":"dsk/api/set_functions/","text":"The output parameter of all functions is none. Unlike the get functions, the set functions sets the similar parameters as many as possible at once. SetApertureSizeStep Set aperture size and step in linear array mode. input parameter int apertureSize int apertureStep SetDetph Set depth start and range. input parameter double depthStart double depthRange SetEncoderAxisReverse Replace the scan encoder and index encoder. input parameter bool reverse SetFilterBandwidth Set the filter start and stop frequencies. input parameter double startFreq double stopFreq SetFocusLocation Set the tx focus location. input parameter double focusLocation SetGain Set the gain. input parameter double gain SetIndexEncoder Set index encoder. All units of length are mm. input parameter double start double stop double step double resolution bool reverse SetPrf Set the PRF. input parameter int prf SetProbeFirstElement Sets the starting element position of the probe used for scanning. input parameter int firstElement SetProbeRxElementLocation Sets the rx start and stop elements location. input parameter int startElement int stopElement SetProbeSpecification Sets the probe specifications. input parameter double freq double pitch int elementCount SetProbeTxElementLocation Sets the tx start and stop elements location. input parameter int startElement int stopElement SetPulseBurstCount Sets the tx burst count. input parameter int burstCount SetPulseVoltage Sets the tx high voltage. input parameter int voltage SetPulseWidth Sets the width of tx pulse width. input parameter double pulseWidth SetScanEncoder Set scan encoder. All units of length are mm. input parameter double start double stop double step double resolution bool reverse SetRefractedAngleGeometry Set the geometry of the view range in the sectorial view. All units are degree. input parameter double start double stop double resolution SetVelocityInSpecimen Set the velocity of specimen. The user should set the speed after deciding whether to use the longitudinal and transverse waves. input parameter int velocity SetWedgeDelay Set the wedge delay. input parameter double wedgeDelay SetWedgeSpecification Set the wedge specification. input parameter bool wedgeEnable double wedgeAngle int velocityInWedge, double firstElementHeight set callback functions The user should be able to receive frame data that the device obtains. That way, frame data can be stored and scanned images can be configured. These are functions that set such a callback function. Several functions are prepared according to the parameter to be received, and when setting several times, the last one is valid. public delegate void DskCallBackFrame(short[] frameData); public delegate void DskCallBackFrameX(short[] frameData, double locX); public delegate void DskCallBackFrameXY(short[] frameData, double locX, double locY); public delegate void DskCallBackFrameXYZ(short[] frameData, double locX, double locY, double locZ); public delegate void DskCallBackFrameMultiBoardXYZ(int boardId, short[] frameData, double locX, double locY, double locZ); \ubaa8\ub4e0 location \uc815\ubcf4\ub294 mm\ub2e8\uc704\uc774\ub2e4.","title":"API set functions"},{"location":"dsk/api/set_functions/#setaperturesizestep","text":"Set aperture size and step in linear array mode. input parameter int apertureSize int apertureStep","title":"SetApertureSizeStep"},{"location":"dsk/api/set_functions/#setdetph","text":"Set depth start and range. input parameter double depthStart double depthRange","title":"SetDetph"},{"location":"dsk/api/set_functions/#setencoderaxisreverse","text":"Replace the scan encoder and index encoder. input parameter bool reverse","title":"SetEncoderAxisReverse"},{"location":"dsk/api/set_functions/#setfilterbandwidth","text":"Set the filter start and stop frequencies. input parameter double startFreq double stopFreq","title":"SetFilterBandwidth"},{"location":"dsk/api/set_functions/#setfocuslocation","text":"Set the tx focus location. input parameter double focusLocation","title":"SetFocusLocation"},{"location":"dsk/api/set_functions/#setgain","text":"Set the gain. input parameter double gain","title":"SetGain"},{"location":"dsk/api/set_functions/#setindexencoder","text":"Set index encoder. All units of length are mm. input parameter double start double stop double step double resolution bool reverse","title":"SetIndexEncoder"},{"location":"dsk/api/set_functions/#setprf","text":"Set the PRF. input parameter int prf","title":"SetPrf"},{"location":"dsk/api/set_functions/#setprobefirstelement","text":"Sets the starting element position of the probe used for scanning. input parameter int firstElement","title":"SetProbeFirstElement"},{"location":"dsk/api/set_functions/#setproberxelementlocation","text":"Sets the rx start and stop elements location. input parameter int startElement int stopElement","title":"SetProbeRxElementLocation"},{"location":"dsk/api/set_functions/#setprobespecification","text":"Sets the probe specifications. input parameter double freq double pitch int elementCount","title":"SetProbeSpecification"},{"location":"dsk/api/set_functions/#setprobetxelementlocation","text":"Sets the tx start and stop elements location. input parameter int startElement int stopElement","title":"SetProbeTxElementLocation"},{"location":"dsk/api/set_functions/#setpulseburstcount","text":"Sets the tx burst count. input parameter int burstCount","title":"SetPulseBurstCount"},{"location":"dsk/api/set_functions/#setpulsevoltage","text":"Sets the tx high voltage. input parameter int voltage","title":"SetPulseVoltage"},{"location":"dsk/api/set_functions/#setpulsewidth","text":"Sets the width of tx pulse width. input parameter double pulseWidth","title":"SetPulseWidth"},{"location":"dsk/api/set_functions/#setscanencoder","text":"Set scan encoder. All units of length are mm. input parameter double start double stop double step double resolution bool reverse","title":"SetScanEncoder"},{"location":"dsk/api/set_functions/#setrefractedanglegeometry","text":"Set the geometry of the view range in the sectorial view. All units are degree. input parameter double start double stop double resolution","title":"SetRefractedAngleGeometry"},{"location":"dsk/api/set_functions/#setvelocityinspecimen","text":"Set the velocity of specimen. The user should set the speed after deciding whether to use the longitudinal and transverse waves. input parameter int velocity","title":"SetVelocityInSpecimen"},{"location":"dsk/api/set_functions/#setwedgedelay","text":"Set the wedge delay. input parameter double wedgeDelay","title":"SetWedgeDelay"},{"location":"dsk/api/set_functions/#setwedgespecification","text":"Set the wedge specification. input parameter bool wedgeEnable double wedgeAngle int velocityInWedge, double firstElementHeight","title":"SetWedgeSpecification"},{"location":"dsk/api/set_functions/#set-callback-functions","text":"The user should be able to receive frame data that the device obtains. That way, frame data can be stored and scanned images can be configured. These are functions that set such a callback function. Several functions are prepared according to the parameter to be received, and when setting several times, the last one is valid. public delegate void DskCallBackFrame(short[] frameData); public delegate void DskCallBackFrameX(short[] frameData, double locX); public delegate void DskCallBackFrameXY(short[] frameData, double locX, double locY); public delegate void DskCallBackFrameXYZ(short[] frameData, double locX, double locY, double locZ); public delegate void DskCallBackFrameMultiBoardXYZ(int boardId, short[] frameData, double locX, double locY, double locZ); \ubaa8\ub4e0 location \uc815\ubcf4\ub294 mm\ub2e8\uc704\uc774\ub2e4.","title":"set callback functions"},{"location":"dsk/api/upload_functions/","text":"UploadAllParameters After calling the Set functions, this function must be called to actually apply the changed parameters. input parameter : None output parameter : None UploadDepthStartRange Upload depth start and range information input parameter double depthStart double depthRange output parameter : None UploadGain Upload gain input parameter double gain output parameter : None UploadInspectionModeStart Start the inspection mode immediately. input parameter : None output parameter : None UploadInspectionModeStop Stop the inspection mode immediately. input parameter : None output parameter : None UploadPrf Upload PRF input parameter : None output parameter : None","title":"API upload functions"},{"location":"dsk/api/upload_functions/#uploadallparameters","text":"After calling the Set functions, this function must be called to actually apply the changed parameters. input parameter : None output parameter : None","title":"UploadAllParameters"},{"location":"dsk/api/upload_functions/#uploaddepthstartrange","text":"Upload depth start and range information input parameter double depthStart double depthRange output parameter : None","title":"UploadDepthStartRange"},{"location":"dsk/api/upload_functions/#uploadgain","text":"Upload gain input parameter double gain output parameter : None","title":"UploadGain"},{"location":"dsk/api/upload_functions/#uploadinspectionmodestart","text":"Start the inspection mode immediately. input parameter : None output parameter : None","title":"UploadInspectionModeStart"},{"location":"dsk/api/upload_functions/#uploadinspectionmodestop","text":"Stop the inspection mode immediately. input parameter : None output parameter : None","title":"UploadInspectionModeStop"},{"location":"dsk/api/upload_functions/#uploadprf","text":"Upload PRF input parameter : None output parameter : None","title":"UploadPrf"},{"location":"dsk/tutorial/","text":"The composition of the tutorial project is as follows. 01-InitDevice : As the simplest example, DSK is initialized, and hardware is initialized.. 02-SScan : This is an example of making the SScan image. 03-AScan : This is an example of displaying the AScan of the desired vector in the frame data received from Callback. 04-Inspection : This is an example of image acquisition using Encoder. 05-ChannelGroup : This is an example of creating a multiple channel group. 06-Multiboard 07-InitDevice_x64 : This is an example of creating a program in x64. 10-SimplePAUT : It is a program that configures a simple PAUT using DSK.","title":"Tutorial"},{"location":"dsk/tutorial/01-initdevice/","text":"InitDevice DSK is assumed to be performed in ultrasonic NDT(non-destructive testing) hardware. The InitDevice project is an example of receiving data through a DMA after hardware initialization. All DSK projects must add both DSDSK.dll and DskCommon project as a reference. When the initdevice program is performed after the build, the following screen is displayed. The code configuration is as follows. Initialize by calling Dsk.InitDsk in the constructor of Form1. In order to use dsk, initDsk must be called first at the beginning of the program. public Form1() { InitializeComponent(); Dsk.InitDsk(); Dsk.LogInfo($\"DSK version => {Dsk.GetVersion()}\"); Load += Form1_Load; FormClosed += Form1_FormClosed; } Pressing the \"Init Device\" button on the screen performs the following code. private void button1_Click(object sender, EventArgs e) { Dsk.InitDevice(); Dsk.SetCallbackFrame(DskCallback); button1.Enabled = false; button2.Enabled = true; } InitDevice actually initializes hardware, and the SetCallbackFrame function specifies the callback function to receive frame data from dsk. When InitDevice is called, DSK performs hardware initialization, obtains the image using default setting, and calls the callback function set in SetCallbackFrame. The callback function in the example simply increases the counter value. public void DskCallback(short[] frameData) { ReceivedCount++; label1.InvokeIfNeeded(() => { label1.Text = $\"{ReceivedCount}\"; }); } If the number on the screen increases, it works normally. Additionally, the function of stopping or restarting image acquisition using Dsk.Freeze and Dsk.Unfreeze are also implemented","title":"Init device"},{"location":"dsk/tutorial/01-initdevice/#initdevice","text":"DSK is assumed to be performed in ultrasonic NDT(non-destructive testing) hardware. The InitDevice project is an example of receiving data through a DMA after hardware initialization. All DSK projects must add both DSDSK.dll and DskCommon project as a reference. When the initdevice program is performed after the build, the following screen is displayed. The code configuration is as follows. Initialize by calling Dsk.InitDsk in the constructor of Form1. In order to use dsk, initDsk must be called first at the beginning of the program. public Form1() { InitializeComponent(); Dsk.InitDsk(); Dsk.LogInfo($\"DSK version => {Dsk.GetVersion()}\"); Load += Form1_Load; FormClosed += Form1_FormClosed; } Pressing the \"Init Device\" button on the screen performs the following code. private void button1_Click(object sender, EventArgs e) { Dsk.InitDevice(); Dsk.SetCallbackFrame(DskCallback); button1.Enabled = false; button2.Enabled = true; } InitDevice actually initializes hardware, and the SetCallbackFrame function specifies the callback function to receive frame data from dsk. When InitDevice is called, DSK performs hardware initialization, obtains the image using default setting, and calls the callback function set in SetCallbackFrame. The callback function in the example simply increases the counter value. public void DskCallback(short[] frameData) { ReceivedCount++; label1.InvokeIfNeeded(() => { label1.Text = $\"{ReceivedCount}\"; }); } If the number on the screen increases, it works normally. Additionally, the function of stopping or restarting image acquisition using Dsk.Freeze and Dsk.Unfreeze are also implemented","title":"InitDevice"},{"location":"dsk/tutorial/02-sscan/","text":"Make SScan image The SScan project makes 2D image after scanning the frame data received from the callback function.. SScan uses frame data to perform scan conversion. The width and height of the 2D image used at this time are automatically calculated according to the setting in the DSK. Therefore, in order to perform scan conversion using DSK, the final image is always made with the width and height of the SScan obtained from DSK. In order to finish the callback as quickly as possible, the callback function just checks whether the number of data delivered is correct, copies it to the buffer, and returns it. After that, scan conversion is performed by timer interrupt. This is because callback is called in DSK thread rather than UI thread, and the same method is used in all examples. public void DskCallback(short[] frameData) { ReceivedCount++; if (frameData.Length != VectorCount * SampleCountPerVector) return; Array.Copy(frameData, RawDataBuffer, VectorCount * SampleCountPerVector); } RawDataBuffer is a buffer that stores frame data. Scan conversion The order of scan conversion of SScan is as follows. Use GetSScanWidth, GetSScanHeight functions to calculate width and height of SScan image Use GetVectorCount, GetSampleCountPerVector functions to obtain information (VectorCount and SampleCountPerVector) about frame data delivered to callback Using CalcSScanImage to obtain a scan converted 2D image of frame data Apply color mapping to the scan converted image and finally display it on the screen void DrawSScan(short[] rawdata) { if (SScanImageWidth <= 0 || SScanImageHeight <= 0) return; if (rawdata == null) return; var _scimage = Dsk.CalcSScanImage(rawdata); if (_scimage == null) { Dsk.LogInfo(\"DrawSScan::SScanDisplayBuffer is null\"); return; } var SScanDisplayBuffer = ColorMap.SScanColorMapping(SScanImageWidth, SScanImageHeight, _scimage); .... } The final image of the SScan project is as follows.","title":"SScan image"},{"location":"dsk/tutorial/02-sscan/#make-sscan-image","text":"The SScan project makes 2D image after scanning the frame data received from the callback function.. SScan uses frame data to perform scan conversion. The width and height of the 2D image used at this time are automatically calculated according to the setting in the DSK. Therefore, in order to perform scan conversion using DSK, the final image is always made with the width and height of the SScan obtained from DSK. In order to finish the callback as quickly as possible, the callback function just checks whether the number of data delivered is correct, copies it to the buffer, and returns it. After that, scan conversion is performed by timer interrupt. This is because callback is called in DSK thread rather than UI thread, and the same method is used in all examples. public void DskCallback(short[] frameData) { ReceivedCount++; if (frameData.Length != VectorCount * SampleCountPerVector) return; Array.Copy(frameData, RawDataBuffer, VectorCount * SampleCountPerVector); } RawDataBuffer is a buffer that stores frame data.","title":"Make SScan image"},{"location":"dsk/tutorial/02-sscan/#scan-conversion","text":"The order of scan conversion of SScan is as follows. Use GetSScanWidth, GetSScanHeight functions to calculate width and height of SScan image Use GetVectorCount, GetSampleCountPerVector functions to obtain information (VectorCount and SampleCountPerVector) about frame data delivered to callback Using CalcSScanImage to obtain a scan converted 2D image of frame data Apply color mapping to the scan converted image and finally display it on the screen void DrawSScan(short[] rawdata) { if (SScanImageWidth <= 0 || SScanImageHeight <= 0) return; if (rawdata == null) return; var _scimage = Dsk.CalcSScanImage(rawdata); if (_scimage == null) { Dsk.LogInfo(\"DrawSScan::SScanDisplayBuffer is null\"); return; } var SScanDisplayBuffer = ColorMap.SScanColorMapping(SScanImageWidth, SScanImageHeight, _scimage); .... } The final image of the SScan project is as follows.","title":"Scan conversion"},{"location":"dsk/tutorial/03-ascan/","text":"The AScan project is an example of creating an AScan image. When copying frame data from the Callback function, copy Ascan data from the Ascan vector position. And creating an Ascan image in timer interrupt is different from the SScan project. public void DskCallback(short[] frameData) { ReceivedCount++; if (frameData.Length != VectorCount * SampleCountPerVector) return; Array.Copy(frameData, RawDataBuffer, VectorCount * SampleCountPerVector); // copy AScan data also. Array.Copy(frameData, AScanVectorIndex * SampleCountPerVector, AScanBuffer, 0, SampleCountPerVector); } The location of the AScan data can be determined by multiplying the AScanVectorIndex by the SamplerCountPerVector as shown in the code above. In the DrawAScan function, an Ascan image is obtained using a bitmap image rather than openGL and displayed on the screen void DrawAScan(short[] data) { var width = AScanImage.Width; var height = AScanImage.Height; bool rotate = false; bool rfwave = false; var bmp = DSBitmap.MakeAScanBitmap(data, SampleCountPerVector, width, height, rotate, rfwave); AScanImage.Image = bmp; } The final image of the AScan project is as follows.","title":"AScan image"},{"location":"dsk/tutorial/04-inspection/","text":"The ultrasound non-destructive testing uses an encoder to locate or obtain an image at a specified location. An inspection project is an example of using an encoder. Encoder settings use the SetScanEncoder function. // set encoder double resolution = 100; // pulses / mm Dsk.SetScanEncoder(0, 100, 1, resolution, false); Parameters are as follows in order. * Start location (mm) * Stop location (mm) * Step (mm) * Encoder pulse count per mm * Reverse flag The above code obtains images every 1 mm from 0 mm to 100 mm, which is an example using an encoder that generates 100 pulses per mm. The SetScanEncoder function is a function that sets the encoder, and sets the inspection mode to actually use the encoder. UploadInspectionModeStart : Start the inspection mode. The DSK obtains an image when the encoder comes to a preset position and calls the callback function. UploadInspectionModeStop : Stop the inspection mode and return to normal mode. UploadEncoderScanReset : Clear the encoder location to 0. The Callback function takes the x location as input. private void DskCallback(short[] frameData, double locX) { ReceivedCount++; if (frameData.Length != VectorCount * SampleCountPerVector) return; Array.Copy(frameData, RawDataBuffer, VectorCount * SampleCountPerVector); EncoderLocationX = locX; } In the code above, locX indicates where the image was obtained. The final image of the inspection project is as follows.","title":"Encoder inspection"},{"location":"dsk/tutorial/05-channelgroup/","text":"This project is an example of a channel group. private void buttonInitDevice_Click(object sender, EventArgs e) { Dsk.InitDevice(); // change channel type ChangeChannelType(); AddChannelType(); IsInitDevice = true; } The above code sets the channel group after the InitDevice. Use the ChangeChannelType to set the default channel to PAW with wedges, and add the PA channel as the second group. void ChangeChannelType() { Dsk.SetChannelType(DskChannelType.PAW); Dsk.UploadAllParameters(); SScanImageWidth0 = Dsk.GetSScanWidth(); SScanImageHeight0 = Dsk.GetSScanHeight(); VectorCount0 = Dsk.GetVectorCount(); SampleCountPerVector0 = Dsk.GetSampleCountPerVector(); } void AddChannelType() { ChannelId1 = Dsk.AddChannelGroup(DskChannelType.PA); Dsk.UploadAllParameters(); Dsk.SetActiveChannelId(ChannelId1); SScanImageWidth1 = Dsk.GetSScanWidth(); SScanImageHeight1 = Dsk.GetSScanHeight(); VectorCount1 = Dsk.GetVectorCount(); SampleCountPerVector1 = Dsk.GetSampleCountPerVector(); } AddChannelGroup() returns channelId, which must be stored. In addition, the id of the active channel can be determined using the GetActiveChannelId function. After saving it, when changing the parameters of the channel, you must set the channel id using the SetActiveChannelId function and then set and upload it The execution image of this project is as follows.","title":"Channel group"},{"location":"dsk/tutorial/07-initdevice_x64/","text":"This project is an example of building with x64 which is a 64bit program. DSK can be made in the same environment of both x86 and x64. To build with x64, you can uncheck the Prefer 32-bit as shown in the screen below. Note that in other examples, the SGRender.dll used as an opengl library for image speed improvement is 32 bits only. For this reason, to build to 64bits, you should not use SGRender.dll, but use another opengl library that supports 64bits (for example, you can use OpenTK).","title":"Init device x64"},{"location":"dsk/tutorial/10-simplepaut/","text":"This project is an example of implementing functions of simple PAUT equipment using functions of DSK. The functions of DSK are largely divided into Get, Set, and Upload. (Refer to API reference manual) In DSK's API, Get is used to obtain the value of DSK, and Set sets the value to DSK. However, the value of Set is only set, and Upload must be called to reflect it in the actual image. Upload functions include uploading only certain parameters, such as UploadGain, or uploading all parameters set by Set, such as UploadAllParameters. GetXX SetXXX UploadXXX UploadAllParameters When an event is generated by the user in the Simple PAUT program, the UploadParameter() function is called as follows. private bool UploadParameter() { lock (SyncParameter) { Gui2Param(); Gui2Gate(); CgParam.Param2Dsk(); Dsk.UploadAllParameters(); CgParam.Dsk2Param(); Param2Gui(); // Update Rulers UpdateRulers(); } return true; } Gui2Param sets the value of the internal variable by the value of the GUI component. In Param2Dsk, the value is set using the set function of DSK, and then UploadAllParameters is called so that the value is actually reflected in the image. When Upload is called, some values can be changed by DSK, which is updated using the Get function of DSK within the Dsk2Param function. Finally, the event processing is finished by updating the values to the screen by Param2Gui. B/C scan The Simple PAUT program uses the encoder settings used in the inspection project to process BScan and CScan. This project create a corresponding B/C image using the ProcessBScanImage and ProcessCScanImage functions. There is an example of obtaining a CScan image on the DSK Common project DSK defines only the API of the function, and load/save parameters are freely configurable by the user. The Simple PAUT program has an example of storing and reading files using the Simple CGParam class defined in DskCommon. It is a method of reading a given file, making CgParam, loading it into DSK, and uploading it. CgParam = Dsk.JsonFile2Object<SimpleCGParam>(fname); CgParam.Param2Dsk(); Dsk.UploadAllParameters(); // update gui CgParam.Dsk2Param(); Param2Gui(); Param2GuiGate(); UpdateRulers(); We used a DSK function called JsonFile2Object, which is serialized with Json, so it can be implemented in the format that the user wants. It was implemented in the order of updating the GUI after reading the value from the file and performing Set and upload to DSK. The final image of the SimplePAUT project is as follows.","title":"Simple PAUT"},{"location":"dsk/tutorial/10-simplepaut/#bc-scan","text":"The Simple PAUT program uses the encoder settings used in the inspection project to process BScan and CScan. This project create a corresponding B/C image using the ProcessBScanImage and ProcessCScanImage functions. There is an example of obtaining a CScan image on the DSK Common project DSK defines only the API of the function, and load/save parameters are freely configurable by the user. The Simple PAUT program has an example of storing and reading files using the Simple CGParam class defined in DskCommon. It is a method of reading a given file, making CgParam, loading it into DSK, and uploading it. CgParam = Dsk.JsonFile2Object<SimpleCGParam>(fname); CgParam.Param2Dsk(); Dsk.UploadAllParameters(); // update gui CgParam.Dsk2Param(); Param2Gui(); Param2GuiGate(); UpdateRulers(); We used a DSK function called JsonFile2Object, which is serialized with Json, so it can be implemented in the format that the user wants. It was implemented in the order of updating the GUI after reading the value from the file and performing Set and upload to DSK. The final image of the SimplePAUT project is as follows.","title":"B/C scan"}]}